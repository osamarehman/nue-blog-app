<div @name="blog-editor" class="blog-editor">
  <form @submit.prevent="submitPost">
    <div class="form-group">
      <label for="title">Title</label>
      <input type="text" id="title" :value="title" @input="e => title = e.target.value" required>
    </div>

    <div class="form-group">
      <label for="description">Description</label>
      <input type="text" id="description" :value="description" @input="e => description = e.target.value" required>
    </div>

    <div class="form-group">
      <label for="content">Content (Markdown)</label>
      <textarea id="content" :value="content" @input="e => content = e.target.value" rows="10" required></textarea>
    </div>

    <div class="form-group">
      <label for="image">Featured Image URL</label>
      <input type="text" id="image" :value="image" @input="e => image = e.target.value">
    </div>

    <div class="form-actions">
      <button type="submit" class="btn primary">Publish Post</button>
      <button type="button" class="btn" @click="cancel">Cancel</button>
    </div>
  </form>

  <div class="message" :class="{ success: success, error: !success }" :if="message">
    { message }
  </div>

  <script>
    import { model } from '../app/model/index.js'

    constructor() {
      this.title = ''
      this.description = ''
      this.content = ''
      this.image = '/img/blog/default.jpg'
      this.message = ''
      this.success = false
    }

    async submitPost() {
      if (!model.authenticated) {
        this.message = 'You must be logged in to create a post'
        this.success = false
        return
      }

      try {
        const slug = this.title
          .toLowerCase()
          .replace(/[^\w\s]/gi, '')
          .replace(/\s+/g, '-')

        const post = await model.createBlog({
          title: this.title,
          description: this.description,
          content: this.content,
          slug,
          image: this.image,
          published: true
        })

        this.message = 'Post published successfully!'
        this.success = true
        
        // Reset form
        this.title = ''
        this.description = ''
        this.content = ''
        this.image = '/img/blog/default.jpg'
        
        // Redirect after a short delay
        setTimeout(() => {
          window.location.href = `/blog/${slug}/`
        }, 2000)
      } catch (error) {
        this.message = `Error: ${error.message}`
        this.success = false
      }
    }

    cancel() {
      window.location.href = '/blog/'
    }
  </script>

  <style>
    .blog-editor {
      max-width: 800px;
      margin: 0 auto;
    }

    .form-group {
      margin-bottom: 1.5rem;
    }

    label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: bold;
    }

    input, textarea {
      width: 100%;
      padding: 0.75rem;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 1rem;
    }

    textarea {
      font-family: monospace;
    }

    .form-actions {
      display: flex;
      gap: 1rem;
      margin-top: 2rem;
    }

    .btn {
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1rem;
      background: #eee;
    }

    .btn.primary {
      background: #0066cc;
      color: white;
    }

    .message {
      margin-top: 1.5rem;
      padding: 1rem;
      border-radius: 4px;
    }

    .message.success {
      background: #d4edda;
      color: #155724;
    }

    .message.error {
      background: #f8d7da;
      color: #721c24;
    }
  </style>
</div>

